
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, c as create_component, m as mount_component, t as transition_in, a as transition_out, b as destroy_component, v as validate_slots, e as element, f as space, g as text, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, n as noop, o as detach_dev } from './vendor-d2329499.js';
import MainPanel from '$lib/components/layout/MainPanel.svelte';

/* src/routes/index.svelte generated by Svelte v3.48.0 */
const file = "src/routes/index.svelte";

// (5:0) <MainPanel>
function create_default_slot(ctx) {
	let h1;
	let t1;
	let p0;
	let t3;
	let div1;
	let div0;
	let h2;
	let t5;
	let p1;
	let t6;
	let a;
	let t8;

	const block = {
		c: function create() {
			h1 = element("h1");
			h1.textContent = "Untitled Projects";
			t1 = space();
			p0 = element("p");
			p0.textContent = "This is a collaborative space for nico and yao to document their shared projects.";
			t3 = space();
			div1 = element("div");
			div0 = element("div");
			h2 = element("h2");
			h2.textContent = "Want to deploy your own site?";
			t5 = space();
			p1 = element("p");
			t6 = text("This site runs on our hand-crafted ");
			a = element("a");
			a.textContent = "code";
			t8 = text(". For now, you can take a look at the code on GitHub. The project is still in early\n\t\t\t\tdevelopment, so please do not send new issues or pull requests. It's not ready yet.");
			attr_dev(h1, "class", "font-semibold text-2xl");
			add_location(h1, file, 5, 1, 99);
			attr_dev(p0, "class", "pt-2 text-gray-700");
			add_location(p0, file, 6, 1, 158);
			attr_dev(h2, "class", "font-semibold text-lg");
			add_location(h2, file, 11, 3, 381);
			attr_dev(a, "href", "https://github.com/runkaiz/untitled-projects");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "class", "font-medium text-indigo-600");
			add_location(a, file, 13, 39, 523);
			attr_dev(p1, "class", "pt-2 text-gray-700");
			add_location(p1, file, 12, 3, 453);
			attr_dev(div0, "class", "basis-full border border-gray-200 rounded-md p-4 my-6");
			add_location(div0, file, 10, 2, 310);
			attr_dev(div1, "class", "flex flex-row");
			add_location(div1, file, 9, 1, 280);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, p0, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, h2);
			append_dev(div0, t5);
			append_dev(div0, p1);
			append_dev(p1, t6);
			append_dev(p1, a);
			append_dev(p1, t8);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(5:0) <MainPanel>",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let mainpanel;
	let current;

	mainpanel = new MainPanel({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(mainpanel.$$.fragment);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			mount_component(mainpanel, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const mainpanel_changes = {};

			if (dirty & /*$$scope*/ 1) {
				mainpanel_changes.$$scope = { dirty, ctx };
			}

			mainpanel.$set(mainpanel_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(mainpanel.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(mainpanel.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(mainpanel, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Routes', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ MainPanel });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export { Routes as default };
//# sourceMappingURL=index.js.map
