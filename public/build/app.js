
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, e as element, a as space, t as text, b as attr_dev, c as add_location, f as insert_dev, g as append_dev, n as noop, h as detach_dev, v as validate_slots } from './vendor-beace0f2.js';

/* src/app.html generated by Svelte v3.48.0 */

const file = "src/app.html";

function create_fragment(ctx) {
	let _DOCTYPE;
	let t0;
	let html;
	let head;
	let meta0;
	let t1;
	let meta1;
	let t2;
	let link;
	let t3;
	let meta2;
	let t4;
	let t5;
	let body;
	let div;

	const block = {
		c: function create() {
			_DOCTYPE = element("!DOCTYPE");
			t0 = space();
			html = element("html");
			head = element("head");
			meta0 = element("meta");
			t1 = space();
			meta1 = element("meta");
			t2 = space();
			link = element("link");
			t3 = space();
			meta2 = element("meta");
			t4 = text("\n\t\t%sveltekit.head%");
			t5 = space();
			body = element("body");
			div = element("div");
			div.textContent = "%sveltekit.body%";
			attr_dev(_DOCTYPE, "html", "");
			add_location(_DOCTYPE, file, 0, 0, 0);
			attr_dev(meta0, "charset", "utf-8");
			add_location(meta0, file, 3, 2, 63);
			attr_dev(meta1, "name", "description");
			attr_dev(meta1, "content", "");
			add_location(meta1, file, 4, 2, 90);
			attr_dev(link, "rel", "icon");
			attr_dev(link, "href", "/favicon.png");
			add_location(link, file, 5, 2, 131);
			attr_dev(meta2, "name", "viewport");
			attr_dev(meta2, "content", "width=device-width, initial-scale=1");
			add_location(meta2, file, 6, 2, 173);
			add_location(head, file, 2, 1, 54);
			attr_dev(div, "id", "svelte");
			add_location(div, file, 10, 2, 282);
			add_location(body, file, 9, 1, 273);
			attr_dev(html, "lang", "en");
			attr_dev(html, "class", "antialiased");
			add_location(html, file, 1, 0, 16);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, _DOCTYPE, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, html, anchor);
			append_dev(html, head);
			append_dev(head, meta0);
			append_dev(head, t1);
			append_dev(head, meta1);
			append_dev(head, t2);
			append_dev(head, link);
			append_dev(head, t3);
			append_dev(head, meta2);
			append_dev(head, t4);
			append_dev(html, t5);
			append_dev(html, body);
			append_dev(body, div);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(_DOCTYPE);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(html);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
	});

	return [];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});
	}
}

export { App as default };
//# sourceMappingURL=app.js.map
